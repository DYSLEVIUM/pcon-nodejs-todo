{"version":3,"sources":["api/publicIP.ts","api/notes.ts","components/NoteListItem/NoteListItem.tsx","components/NotesList/NoteList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getPublicId","fetch","method","headers","then","res","json","endPoint","addNote","Note","a","JSON","ip","publicId","stringify","body","getAllNotes","updateNote","newNote","NoteListItem","props","useState","isEditActive","setIsEditActive","titleRef","useRef","descriptionRef","editDoneClicked","title","current","innerText","description","noteId","note","deleteClicked","className","contentEditable","suppressContentEditableWarning","style","cursor","ref","onClick","display","NoteList","notes","setNotes","useEffect","addClicked","map","index","reverse","type","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c09d06e3.chunk.js","sourcesContent":["import PublicIP from '../models/PublicIP';\r\n\r\nexport function getPublicId(): Promise<PublicIP> {\r\n  return fetch('https://api.ipify.org/?format=json', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then((res: Response) => res.json());\r\n}\r\n","import NoteInterface from '../models/NoteInterface';\r\nimport { getPublicId } from './publicIP';\r\n\r\n//  !   change endpoint later\r\n// const endPoint = 'http://localhost';\r\nconst endPoint = '';\r\nexport async function addNote(Note: NoteInterface): Promise<Response> {\r\n  return fetch(`${endPoint}/addNote`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      ...Note,\r\n      publicId: await getPublicId().then((res) => res.ip),\r\n    }),\r\n  }).then((res: Response) => res.json());\r\n}\r\n\r\nexport function getAllNotes(): Promise<NoteInterface[]> {\r\n  return fetch(`${endPoint}/getNotes`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then((res: Response) => res.json());\r\n}\r\n\r\nexport function getNote(noteId: number): Promise<NoteInterface> {\r\n  return fetch(`${endPoint}/getNote/${noteId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then((res: Response) => res.json());\r\n}\r\n\r\nexport async function updateNote(newNote: NoteInterface): Promise<Response> {\r\n  return fetch(`${endPoint}/updateNote`, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      ...newNote,\r\n      publicId: await getPublicId().then((res) => res.ip),\r\n    }),\r\n  }).then((res: Response) => res.json());\r\n}\r\n\r\nexport function deleteNote(noteId: number): Promise<Response> {\r\n  return fetch(`${endPoint}/deleteNote/${noteId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then((res: Response) => res.json());\r\n}\r\n","import { useState, useRef } from 'react';\r\nimport { updateNote, deleteNote } from '../../api/notes';\r\nimport NoteInterface from '../../models/NoteInterface';\r\nimport './NoteListItem.scss';\r\n\r\nexport default function NoteListItem(props: any) {\r\n  const [isEditActive, setIsEditActive] = useState<boolean>(false);\r\n\r\n  let titleRef = useRef<HTMLDivElement>(null);\r\n  let descriptionRef = useRef<HTMLDivElement>(null);\r\n\r\n  const editDoneClicked = async () => {\r\n    const newNote: NoteInterface = {\r\n      title: titleRef.current?.innerText || '',\r\n      description: descriptionRef.current?.innerText || '',\r\n      noteId: props.note.noteId,\r\n    };\r\n\r\n    setIsEditActive(false);\r\n    await updateNote(newNote);\r\n  };\r\n\r\n  const deleteClicked = async () => {\r\n    await deleteNote(props.note.noteId);\r\n  };\r\n\r\n  return (\r\n    <div className=\"noteListItemContainer\">\r\n      <div className=\"titleContainer\">\r\n        <div\r\n          className=\"noteTitle\"\r\n          contentEditable={isEditActive ? true : false}\r\n          suppressContentEditableWarning={true}\r\n          style={isEditActive ? { cursor: 'text' } : { cursor: 'default' }}\r\n          ref={titleRef}\r\n        >\r\n          {props.note.title}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"descriptionContainer\">\r\n        <div\r\n          className=\"noteDesc\"\r\n          contentEditable={isEditActive ? true : false}\r\n          suppressContentEditableWarning={true}\r\n          style={isEditActive ? { cursor: 'text' } : { cursor: 'default' }}\r\n          ref={descriptionRef}\r\n        >\r\n          {props.note.description}\r\n        </div>\r\n      </div>\r\n      <div className=\"btnContainer\">\r\n        <button\r\n          onClick={editDoneClicked}\r\n          style={isEditActive ? { display: 'block' } : { display: 'none' }}\r\n        >\r\n          Done\r\n        </button>\r\n        <button\r\n          onClick={() => setIsEditActive(true)}\r\n          style={isEditActive ? { display: 'none' } : { display: 'block' }}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button onClick={deleteClicked}>Delete</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport NoteListItem from '../NoteListItem/NoteListItem';\r\n\r\nimport './NoteList.scss';\r\n\r\nimport NoteInterface from '../../models/NoteInterface';\r\n\r\nimport { getAllNotes, addNote } from '../../api/notes';\r\nimport { title } from 'process';\r\n\r\nexport default function NoteList() {\r\n  const [notes, setNotes] = useState<NoteInterface[]>([]);\r\n\r\n  let titleRef = useRef<HTMLDivElement>(null);\r\n  let descriptionRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      await getAllNotes().then((res: NoteInterface[]) => setNotes(res));\r\n    })();\r\n  }, []);\r\n\r\n  const addClicked = async () => {\r\n    const newNote: NoteInterface = {\r\n      title: titleRef.current?.innerText || '',\r\n      description: descriptionRef.current?.innerText || '',\r\n    };\r\n\r\n    await addNote(newNote);\r\n\r\n    if (titleRef.current) titleRef.current.innerText = '';\r\n    if (descriptionRef.current) descriptionRef.current.innerText = '';\r\n\r\n    await getAllNotes().then((res: NoteInterface[]) => setNotes(res));\r\n  };\r\n\r\n  return (\r\n    <div className=\"noteListContainerWrapper\">\r\n      <div className=\"noteListContainer\">\r\n        {notes\r\n          .map((note: NoteInterface, index) => {\r\n            return <NoteListItem key={index} note={note} />;\r\n          })\r\n          .reverse()}\r\n      </div>\r\n\r\n      <div className=\"addNoteContainer\">\r\n        <div className=\"noteTitleContainer\">\r\n          <div className=\"heading\">Note Title</div>\r\n          <div\r\n            className=\"noteTitle\"\r\n            contentEditable={true}\r\n            suppressContentEditableWarning={true}\r\n            ref={titleRef}\r\n          ></div>\r\n        </div>\r\n        <div className=\"noteDescriptionContainer\">\r\n          <div className=\"heading\">Note Description</div>\r\n          <div\r\n            className=\"noteDescription\"\r\n            contentEditable={true}\r\n            suppressContentEditableWarning={true}\r\n            ref={descriptionRef}\r\n          ></div>\r\n        </div>\r\n        <button type=\"submit\" onClick={addClicked} className=\"addBtn\">\r\n          Add\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './App.scss';\nimport NoteList from './components/NotesList/NoteList';\n\nfunction App() {\n  return (\n    <main>\n      <NoteList />\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}