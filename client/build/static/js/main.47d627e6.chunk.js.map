{"version":3,"sources":["api/publicIP.ts","api/notes.ts","components/NoteListItem/NoteListItem.tsx","components/NotesList/NoteList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getPublicId","fetch","method","headers","then","res","json","addNote","Note","a","JSON","ip","publicId","stringify","body","updateNote","newNote","NoteListItem","props","useState","isEditActive","setIsEditActive","titleRef","useRef","descriptionRef","editDoneClicked","title","current","value","description","noteId","note","deleteClicked","defaultValue","style","cursor","ref","readOnly","onClick","display","NoteList","notes","setNotes","useEffect","addClicked","map","index","type","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47d627e6.chunk.js","sourcesContent":["import PublicIP from '../models/PublicIP';\r\n\r\nexport function getPublicId(): Promise<PublicIP> {\r\n  return fetch('https://api.ipify.org/?format=json', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then((res: Response) => res.json());\r\n}\r\n","import NoteInterface from '../models/NoteInterface';\r\nimport { getPublicId } from './publicIP';\r\n\r\n//  !   change endpoint later\r\nexport async function addNote(Note: NoteInterface): Promise<Response> {\r\n  return fetch('/addNote', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      ...Note,\r\n      publicId: await getPublicId().then((res) => res.ip),\r\n    }),\r\n  }).then((res: Response) => res.json());\r\n}\r\n\r\nexport function getAllNotes(): Promise<NoteInterface[]> {\r\n  return fetch('/getNotes', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then((res: Response) => res.json());\r\n}\r\n\r\nexport function getNote(noteId: number): Promise<NoteInterface> {\r\n  return fetch(`/getNote/${noteId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then((res: Response) => res.json());\r\n}\r\n\r\nexport async function updateNote(newNote: NoteInterface): Promise<Response> {\r\n  return fetch('/updateNote', {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      ...newNote,\r\n      publicId: await getPublicId().then((res) => res.ip),\r\n    }),\r\n  }).then((res: Response) => res.json());\r\n}\r\n\r\nexport function deleteNote(noteId: number): Promise<Response> {\r\n  return fetch(`/deleteNote/${noteId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then((res: Response) => res.json());\r\n}\r\n","import { useState, useRef } from 'react';\r\nimport { updateNote, deleteNote } from '../../api/notes';\r\nimport NoteInterface from '../../models/NoteInterface';\r\nimport './NoteListItem.scss';\r\n\r\nexport default function NoteListItem(props: any) {\r\n  const [isEditActive, setIsEditActive] = useState<boolean>(false);\r\n\r\n  let titleRef = useRef<HTMLInputElement>(null);\r\n  let descriptionRef = useRef<HTMLInputElement>(null);\r\n\r\n  const editDoneClicked = async () => {\r\n    const newNote: NoteInterface = {\r\n      title: titleRef.current?.value || '',\r\n      description: descriptionRef.current?.value || '',\r\n      noteId: props.note.noteId,\r\n    };\r\n\r\n    await updateNote(newNote);\r\n    setIsEditActive(false);\r\n  };\r\n\r\n  const deleteClicked = async () => {\r\n    await deleteNote(props.note.noteId);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        defaultValue={props.note.title}\r\n        style={isEditActive ? { cursor: 'text' } : { cursor: 'default' }}\r\n        ref={titleRef}\r\n        readOnly={!isEditActive}\r\n      ></input>\r\n      <input\r\n        defaultValue={props.note.description}\r\n        style={isEditActive ? { cursor: 'text' } : { cursor: 'default' }}\r\n        ref={descriptionRef}\r\n        readOnly={!isEditActive}\r\n      ></input>\r\n      <button\r\n        onClick={editDoneClicked}\r\n        style={isEditActive ? { display: 'block' } : { display: 'none' }}\r\n      >\r\n        Done\r\n      </button>\r\n      <button\r\n        onClick={() => setIsEditActive(true)}\r\n        style={isEditActive ? { display: 'none' } : { display: 'block' }}\r\n      >\r\n        Edit\r\n      </button>\r\n      <button onClick={deleteClicked}>Delete</button>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport NoteListItem from '../NoteListItem/NoteListItem';\r\n\r\nimport NoteInterface from '../../models/NoteInterface';\r\n\r\nimport { getAllNotes, addNote } from '../../api/notes';\r\n\r\nexport default function NoteList() {\r\n  const [notes, setNotes] = useState<NoteInterface[]>([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      await getAllNotes().then((res: NoteInterface[]) => setNotes(res));\r\n    })();\r\n  }, [notes]);\r\n\r\n  const addClicked = async () => {\r\n    const newNote: NoteInterface = {\r\n      title: 'hello from front',\r\n      description: 'front desc',\r\n    };\r\n\r\n    await addNote(newNote);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {notes.map((note: NoteInterface, index) => {\r\n        return <NoteListItem key={index} note={note} />;\r\n      })}\r\n\r\n      <button type=\"submit\" onClick={addClicked}>\r\n        Add\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import './App.scss';\nimport NoteList from './components/NotesList/NoteList';\n\nfunction App() {\n  return <NoteList />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}